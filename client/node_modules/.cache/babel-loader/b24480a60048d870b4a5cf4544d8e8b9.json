{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/apollo/with-apollo-client.js\";\nimport React from 'react';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport initApollo from \"./init-apollo\";\nimport Head from 'next/head';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n/**\n * Get the display name of a component\n * @name getComponentDisplayName\n * @param {React.Component} Component React component\n * @returns {String} Component display name\n */\n\nvar getComponentDisplayName = function getComponentDisplayName(Component) {\n  return Component.displayName || Component.name || 'Unknown';\n};\n\nexport default (function (App) {\n  var Apollo =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, appProps, apollo, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree; // TODO:\n                  // - pass prop data to url \n                  // - check if getInitialProps was called without a requrest object\n                  // - parse user object\n                  //ctx.ctx.apolloClient = apollo;\n\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return App.getInitialProps(ctx);\n\n                case 5:\n                  appProps = _context.sent;\n\n                case 6:\n                  // TODO: don't render if the response is finished while redirecting\n                  // const apolloState = {};\n                  // if (!process.browser) {\n                  //   // Run all GraphQL queries\n                  //   await getDataFromTree((\n                  //     <ApolloProvider client={apollo}>\n                  //       <WrappedComponent {...appProps} Component={Component} router={router} />\n                  //     </ApolloProvider>\n                  //   ));\n                  apollo = initApollo();\n\n                  if (process.browser) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  _context.prev = 8;\n                  _context.next = 11;\n                  return getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 52\n                    },\n                    __self: this\n                  })));\n\n                case 11:\n                  _context.next = 16;\n                  break;\n\n                case 13:\n                  _context.prev = 13;\n                  _context.t0 = _context[\"catch\"](8);\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 16:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head sideeffect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 17:\n                  //Extract query data from the Apollo store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 19:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[8, 13]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }() // static propTypes = {\n      //   apolloState: PropTypes.object.isRequired\n      // };\n      // TODO: getDerivedStateFromProps(nextProps)\n      // - update routing store and rewrite routing path\n\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props)); // `getDataFromTree` renders the component first, then the client is passed off as a property.\n      // After that, render is done using Next's normal rendering pipeline\n\n      _this.apolloClient = initApollo(props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({\n          apolloClient: this.apolloClient\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component);\n\n  Apollo.displayName = \"WithApolloClient(\".concat(getComponentDisplayName(App), \")\");\n});","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/apollo/with-apollo-client.js"],"names":["React","ApolloProvider","getDataFromTree","initApollo","Head","hoistNonReactStatics","getComponentDisplayName","Component","displayName","name","App","Apollo","ctx","AppTree","appProps","getInitialProps","apollo","process","browser","console","error","rewind","apolloState","cache","extract","props","apolloClient"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,OAAOC,UAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA;;;;;;;AAMA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,SAAS,EAAI;AAC3C,SAAOA,SAAS,CAACC,WAAV,IAAyBD,SAAS,CAACE,IAAnC,IAA2C,SAAlD;AACD,CAFD;;AAKA,gBAAe,UAAAC,GAAG,EAAI;AAAA,MACdC,MADc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAGWC,GAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAIRC,kBAAAA,OAJQ,GAIID,GAJJ,CAIRC,OAJQ,EAMhB;AACA;AACA;AACA;AAGA;;AAEIC,kBAAAA,QAdY,GAcD,EAdC;;AAAA,uBAeZJ,GAAG,CAACK,eAfQ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAgBGL,GAAG,CAACK,eAAJ,CAAoBH,GAApB,CAhBH;;AAAA;AAgBdE,kBAAAA,QAhBc;;AAAA;AAmBhB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEME,kBAAAA,MA/BU,GA+BDb,UAAU,EA/BT;;AAAA,sBAgCXc,OAAO,CAACC,OAhCG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAkCNhB,eAAe,CAAC,oBAAC,OAAD,eAAaY,QAAb;AAAuB,oBAAA,YAAY,EAAEE,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAD,CAlCT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoCZG,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AApCY;AAuCd;AACA;AACAhB,kBAAAA,IAAI,CAACiB,MAAL;;AAzCc;AA4ChB;AACMC,kBAAAA,WA7CU,GA6CIN,MAAM,CAACO,KAAP,CAAaC,OAAb,EA7CJ;AAAA,qEAgDXV,QAhDW;AAiDdQ,oBAAAA,WAAW,EAAXA;AAjDc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAqDlB;AACA;AACA;AAEA;AACA;;AA1DkB;;AA4DlB,oBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN,GADiB,CAEjB;AACA;;AACA,YAAKC,YAAL,GAAoBvB,UAAU,CAACsB,KAAK,CAACH,WAAP,CAA9B;AAJiB;AAKlB;;AAjEiB;AAAA;AAAA,+BAmET;AACP,eAAO,oBAAC,GAAD;AAAK,UAAA,YAAY,EAAE,KAAKI;AAAxB,WAA0C,KAAKD,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AArEiB;;AAAA;AAAA,IACCzB,KAAK,CAACO,SADP;;AACdI,EAAAA,MADc,CAEXH,WAFW,8BAEuBF,uBAAuB,CAACI,GAAD,CAF9C;AAuErB,CAvED","sourcesContent":["import React from 'react';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\n/**\n * Get the display name of a component\n * @name getComponentDisplayName\n * @param {React.Component} Component React component\n * @returns {String} Component display name\n */\nconst getComponentDisplayName = Component => {\n  return Component.displayName || Component.name || 'Unknown';\n}\n\n\nexport default App => {\n  class Apollo extends React.Component {\n    static displayName = `WithApolloClient(${getComponentDisplayName(App)})`;\n    static async getInitialProps(ctx) {\n      const { AppTree } = ctx;\n\n      // TODO:\n      // - pass prop data to url \n      // - check if getInitialProps was called without a requrest object\n      // - parse user object\n\n\n      //ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      // TODO: don't render if the response is finished while redirecting\n\n      // const apolloState = {};\n\n      // if (!process.browser) {\n      //   // Run all GraphQL queries\n      //   await getDataFromTree((\n      //     <ApolloProvider client={apollo}>\n      //       <WrappedComponent {...appProps} Component={Component} router={router} />\n      //     </ApolloProvider>\n      //   ));\n\n      const apollo = initApollo();\n      if (!process.browser) {\n        try {\n          await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />);\n        } catch (error) {\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head sideeffect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      //Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    // static propTypes = {\n    //   apolloState: PropTypes.object.isRequired\n    // };\n\n    // TODO: getDerivedStateFromProps(nextProps)\n    // - update routing store and rewrite routing path\n\n    constructor(props) {\n      super(props);\n      // `getDataFromTree` renders the component first, then the client is passed off as a property.\n      // After that, render is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App apolloClient={this.apolloClient} {...this.props} />\n    }\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}