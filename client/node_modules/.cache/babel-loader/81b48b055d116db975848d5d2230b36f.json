{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLihnk } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n\nvar create = function create(initialState) {\n  var httpLink = new HttpLihnk({\n    uri: 'http://localhost:3000/graphql-beta',\n    credentials: 'same-origin',\n    fetch: !process.browser && fetch\n  });\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    link: httpLink,\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n};\n/**\n * @name initApollo\n * @param {Object} initialState Initial state to initialize the Apollo client with\n * @return {ApolloClient} Apollo client instance\n */\n\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections\n  if (!process.browser) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/apollo/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLihnk","fetch","apolloClient","create","initialState","httpLink","uri","credentials","process","browser","connectToDevTools","ssrMode","link","cache","restore","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,SAAtC,QAAuD,cAAvD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,YAAY,EAAI;AAE7B,MAAMC,QAAQ,GAAG,IAAIL,SAAJ,CAAc;AAC7BM,IAAAA,GAAG,EAAE,oCADwB;AAE7BC,IAAAA,WAAW,EAAE,aAFgB;AAG7BN,IAAAA,KAAK,EAAE,CAACO,OAAO,CAACC,OAAT,IAAoBR;AAHE,GAAd,CAAjB;AAMA,SAAO,IAAIH,YAAJ,CAAiB;AACtBY,IAAAA,iBAAiB,EAAEF,OAAO,CAACC,OADL;AAEtBE,IAAAA,OAAO,EAAE,CAACH,OAAO,CAACC,OAFI;AAGtBG,IAAAA,IAAI,EAAEP,QAHgB;AAItBQ,IAAAA,KAAK,EAAE,IAAId,aAAJ,GAAoBe,OAApB,CAA4BV,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD,CAdD;AAgBA;;;;;;;AAKA,eAAe,SAASW,UAAT,CAAqBX,YAArB,EAAmC;AAChD;AACA;AACA,MAAI,CAACI,OAAO,CAACC,OAAb,EAAsB;AACpB,WAAON,MAAM,CAACC,YAAD,CAAb;AACD,GAL+C,CAOhD;;;AACA,MAAI,CAACF,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGC,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOF,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLihnk } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\n\nlet apolloClient = null;\n\nconst create = initialState => {\n\n  const httpLink = new HttpLihnk({\n    uri: 'http://localhost:3000/graphql-beta',\n    credentials: 'same-origin',\n    fetch: !process.browser && fetch\n  });\n\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    link: httpLink,\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\n/**\n * @name initApollo\n * @param {Object} initialState Initial state to initialize the Apollo client with\n * @return {ApolloClient} Apollo client instance\n */\nexport default function initApollo (initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState)\n  }\n\n  return apolloClient;\n} "]},"metadata":{},"sourceType":"module"}