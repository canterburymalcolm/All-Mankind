{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport initApollo from \"./init-apollo\";\nimport Head from 'next/head';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n/**\n * Get the display name of a component\n * @name getComponentDisplayName\n * @param {React.Component} Component React component\n * @returns {String} Component display name\n */\n\nvar getComponentDisplayName = function getComponentDisplayName(Component) {\n  return Component.displayName || Component.name || 'Unknown';\n};\n/**\n * @name withApolloClient\n * @summary Wraps the component with a configured Apollo client provider\n * @param {React.Component} WrappedComponent Component to wrap\n * @returns {React.Component} Higher order component\n */\n\n\nexport default function withApolloClient(WrappedComponent) {\n  var WithApolloClient =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithApolloClient, _React$Component);\n\n    _createClass(WithApolloClient, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, router, apollo, wrappedComponentProps, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component, router = ctx.router; // TODO:\n                  // - pass prop data to url \n                  // - check if getInitialProps was called without a requrest object\n                  // - parse user object\n\n                  apollo = initApollo();\n                  ctx.ctx.apolloClient = apollo;\n                  wrappedComponentProps = {};\n\n                  if (!WrappedComponent.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return WrappedComponent.getInitialProps(ctx);\n\n                case 7:\n                  wrappedComponentProps = _context.sent;\n\n                case 8:\n                  // TODO: don't render if the response is finished while redirecting\n                  apolloState = {};\n\n                  if (process.browser) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  _context.next = 12;\n                  return getDataFromTree(React.createElement(ApolloProvider, {\n                    client: apollo\n                  }, React.createElement(WrappedComponent, _extends({}, wrappedComponentProps, {\n                    Component: Component,\n                    router: router\n                  }))));\n\n                case 12:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head sideeffect therefore need to be cleared manually\n                  Head.rewind(); //Extract query data from the Apollo store\n\n                  apolloState.data = apollo.cache.extract();\n                  _context.next = 17;\n                  break;\n\n                case 16:\n                  apolloState.data = {};\n\n                case 17:\n                  return _context.abrupt(\"return\", _objectSpread({}, wrappedComponentProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 18:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    // static propTypes = {\n    //   apolloState: PropTypes.object.isRequired\n    // };\n    // TODO: getDerivedStateFromProps(nextProps)\n    // - update routing store and rewrite routing path\n    function WithApolloClient(props) {\n      var _this;\n\n      _classCallCheck(this, WithApolloClient);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithApolloClient).call(this, props)); // `getDataFromTree` renders the component first, then the client is passed off as a property.\n      // After that, render is done using Next's normal rendering pipeline\n\n      _this.apollo = initApollo(props.apolloState.data); // State must be initialized if getDerivedStateFromProps is used\n\n      _this.state = {};\n      return _this;\n    }\n\n    _createClass(WithApolloClient, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(ApolloProvider, {\n          client: this.apollo\n        }, React.createElement(WrappedComponent, this.props));\n      }\n    }]);\n\n    return WithApolloClient;\n  }(React.Component); // Exclude copying `getInitialProps` because WithApolloClient ha its own\n\n\n  WithApolloClient.displayName = \"WithApolloClient(\".concat(getComponentDisplayName(WrappedComponent), \")\");\n  hoistNonReactStatics(WithApolloClient, WrappedComponent, {\n    getInitialProps: true\n  });\n  return WithApolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}