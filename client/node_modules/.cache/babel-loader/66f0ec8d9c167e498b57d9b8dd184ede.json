{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/apollo/with-apollo-client.js\";\nimport React from 'react';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n/**\n * Get the display name of a component\n * @name getComponentDisplayName\n * @param {React.Component} Component React component\n * @returns {String} Component display name\n */\n\nvar getComponentDisplayName = function getComponentDisplayName(Component) {\n  // return Component.displayName || Component.name || 'Unknown';\n  return 'Unknown';\n};\n/**\n * @name withApolloClient\n * @summary Wraps the component with a configured Apollo client provider\n * @param {React.Component} WrappedComponent Component to wrap\n * @returns {React.Component} Higher order component\n */\n\n\nexport default function withApolloClient(WrappedComponent) {\n  var WithApolloClient =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithApolloClient, _React$Component);\n\n    _createClass(WithApolloClient, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, apollo, wrappedComponentProps, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component; // TODO:\n                  // - pass prop data to url \n                  // - check if getInitialProps was called without a requrest object\n                  // - parse user object\n\n                  apollo = initApollo();\n                  ctx.ctx.apolloClient = apollo;\n                  wrappedComponentProps = {};\n\n                  if (!WrappedComponent.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return WrappedComponent.getInitialProps(ctx);\n\n                case 7:\n                  wrappedComponentProps = _context.sent;\n\n                case 8:\n                  // TODO: don't render if the response is finished while redirecting\n                  apolloState = {};\n\n                  if (process.borwser) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  _context.next = 12;\n                  return getDataFromTree(React.createElement(ApolloProvider, {\n                    client: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 51\n                    },\n                    __self: this\n                  }, React.createElement(WrappedComponent, _extends({}, wrappedComponentProps, {\n                    Component: Component,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 52\n                    },\n                    __self: this\n                  }))));\n\n                case 12:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head sideeffect therefore need to be cleared manually\n                  Head.rewind(); //Extract query data from the Apollo store\n\n                  apolloState.data = apollo.cache.extract();\n                  _context.next = 17;\n                  break;\n\n                case 16:\n                  apolloState.data = {};\n\n                case 17:\n                  return _context.abrupt(\"return\", _objectSpread({}, wrappedComponentProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 18:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    // static propTypes = {\n    //   apolloState: PropTypes.object.isRequired\n    // };\n    // TODO: getDerivedStateFromProps(nextProps)\n    // - update routing store and rewrite routing path\n    function WithApolloClient(props) {\n      var _this;\n\n      _classCallCheck(this, WithApolloClient);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithApolloClient).call(this, props)); // `getDataFromTree` renders the component first, then the client is passed off as a property.\n      // After that, render is done using Next's normal rendering pipeline\n\n      _this.apollo = initApollo(props.apolloState.data); // State must be initialized if getDerivedStateFromProps is used\n\n      _this.state = {};\n      return _this;\n    }\n\n    _createClass(WithApolloClient, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(ApolloProvider, {\n          client: this.apollo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(WrappedComponent, _extends({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        })));\n      }\n    }]);\n\n    return WithApolloClient;\n  }(React.Component); // Exclude copying `getInitialProps` because WithApolloClient ha its own\n\n\n  _defineProperty(WithApolloClient, \"displayName\", \"WithApolloClient(\".concat(getComponentDisplayName(WrappedComponent), \")\"));\n\n  hoistNonReactStatics(WithApolloClient, WrappedComponent, {\n    getInitialProps: true\n  });\n  return WithApolloClient;\n}","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/apollo/with-apollo-client.js"],"names":["React","ApolloProvider","getDataFromTree","initApollo","Head","hoistNonReactStatics","getComponentDisplayName","Component","withApolloClient","WrappedComponent","WithApolloClient","ctx","apollo","apolloClient","wrappedComponentProps","getInitialProps","apolloState","process","borwser","rewind","data","cache","extract","props","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport hoistNonReactStatics from 'hoist-non-react-statics'; \n\n/**\n * Get the display name of a component\n * @name getComponentDisplayName\n * @param {React.Component} Component React component\n * @returns {String} Component display name\n */\nconst getComponentDisplayName = Component => {\n  // return Component.displayName || Component.name || 'Unknown';\n  return 'Unknown';\n}\n\n\n/**\n * @name withApolloClient\n * @summary Wraps the component with a configured Apollo client provider\n * @param {React.Component} WrappedComponent Component to wrap\n * @returns {React.Component} Higher order component\n */\nexport default function withApolloClient(WrappedComponent) {\n  class WithApolloClient extends React.Component {\n    static async getInitialProps(ctx) {\n      const { Component } = ctx;\n\n      // TODO:\n      // - pass prop data to url \n      // - check if getInitialProps was called without a requrest object\n      // - parse user object\n\n      const apollo = initApollo();\n\n      ctx.ctx.apolloClient = apollo;\n\n      let wrappedComponentProps = {};\n      if (WrappedComponent.getInitialProps) {\n        wrappedComponentProps = await WrappedComponent.getInitialProps(ctx);\n      }\n\n      // TODO: don't render if the response is finished while redirecting\n\n      const apolloState = {};\n\n      if (!process.borwser) {\n        // Run all GraphQL queries\n        await getDataFromTree((\n          <ApolloProvider client={apollo}>\n            <WrappedComponent {...wrappedComponentProps} Component={Component} />\n          </ApolloProvider>\n        ));\n\n        // getDataFromTree does not call componentWillUnmount\n        // head sideeffect therefore need to be cleared manually\n        Head.rewind();\n\n        //Extract query data from the Apollo store\n        apolloState.data = apollo.cache.extract();\n      } else {\n        apolloState.data = {};\n      }\n\n      return {\n        ...wrappedComponentProps,\n        apolloState\n      };\n    }\n    static displayName = `WithApolloClient(${getComponentDisplayName(WrappedComponent)})`;\n\n    // static propTypes = {\n    //   apolloState: PropTypes.object.isRequired\n    // };\n\n    // TODO: getDerivedStateFromProps(nextProps)\n    // - update routing store and rewrite routing path\n\n    constructor(props) {\n      super(props);\n      // `getDataFromTree` renders the component first, then the client is passed off as a property.\n      // After that, render is done using Next's normal rendering pipeline\n      this.apollo = initApollo(props.apolloState.data);\n\n      // State must be initialized if getDerivedStateFromProps is used\n      this.state = {};\n    }\n\n    render() {\n      return (\n        <ApolloProvider client={this.apollo}>\n          <WrappedComponent {...this.props} />\n        </ApolloProvider>\n      );\n    }\n  }\n\n  // Exclude copying `getInitialProps` because WithApolloClient ha its own\n  hoistNonReactStatics(WithApolloClient, WrappedComponent, { getInitialProps: true });\n\n  return WithApolloClient;\n}"]},"metadata":{},"sourceType":"module"}