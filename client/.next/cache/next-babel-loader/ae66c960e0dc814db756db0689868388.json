{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/with-apollo-client.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApolloClient(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApolloClient = function WithApolloClient(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = useMemo(function () {\n      return apolloClient || initApolloClient(apolloState);\n    }, []);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApolloClient HOC only works with PageComponents.');\n    }\n\n    WithApolloClient.displayName = \"withApolloClient(\".concat(displayName, \")\");\n  } // Allow Next.js to remove getInitialProps from the browser build\n\n\n  if (false) {\n    if (ssr) {\n      WithApolloClient.getInitialProps =\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, pageProps, apolloClient, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree;\n                  pageProps = {};\n\n                  if (!PageComponent.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return PageComponent.getInitialProps(ctx);\n\n                case 5:\n                  pageProps = _context.sent;\n\n                case 6:\n                  // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n                  apolloClient = initApolloClient();\n                  _context.prev = 7;\n                  _context.next = 10;\n                  return require('@apollo/react-ssr').getDataFromTree(__jsx(AppTree, {\n                    pageProps: _objectSpread({}, pageProps, {\n                      apolloClient: apolloClient\n                    }),\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 56\n                    },\n                    __self: this\n                  }));\n\n                case 10:\n                  _context.next = 15;\n                  break;\n\n                case 12:\n                  _context.prev = 12;\n                  _context.t0 = _context[\"catch\"](7);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 15:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind(); // Extract query data from the Apollo store\n\n                  apolloState = apolloClient.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 18:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[7, 12]]);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    }\n  }\n\n  return WithApolloClient;\n}","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/with-apollo-client.js"],"names":["React","useMemo","Head","ApolloProvider","withApolloClient","PageComponent","ssr","WithApolloClient","apolloClient","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","require","getDataFromTree","error","rewind","cache","extract"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,gBAAT,CAA2BC,aAA3B,EAA+D;AAAA,iFAAJ,EAAI;AAAA,sBAAnBC,GAAmB;AAAA,MAAnBA,GAAmB,yBAAb,IAAa;;AACpE,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAiD;AAAA,QAA9CC,YAA8C,SAA9CA,YAA8C;AAAA,QAAhCC,WAAgC,SAAhCA,WAAgC;AAAA,QAAhBC,SAAgB;;AACxE,QAAMC,MAAM,GAAGV,OAAO,CACpB;AAAA,aAAMO,YAAY,IAAII,gBAAgB,CAACH,WAAD,CAAtC;AAAA,KADoB,EAEpB,EAFoB,CAAtB;AAIA,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GAVD,CADoE,CAapE;;;AACA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAMC,WAAW,GACfX,aAAa,CAACW,WAAd,IAA6BX,aAAa,CAACY,IAA3C,IAAmD,WADrD;;AAGA,QAAID,WAAW,KAAK,KAApB,EAA2B;AACzBE,MAAAA,OAAO,CAACC,IAAR,CAAa,2DAAb;AACD;;AAEDZ,IAAAA,gBAAgB,CAACS,WAAjB,8BAAmDA,WAAnD;AACD,GAvBmE,CAyBpE;;;AACA,aAAmC;AACjC,QAAIV,GAAJ,EAAS;AACPC,MAAAA,gBAAgB,CAACa,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAmC,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,kBAAAA,OADyB,GACbD,GADa,CACzBC,OADyB;AAG7BZ,kBAAAA,SAH6B,GAGjB,EAHiB;;AAAA,uBAI7BL,aAAa,CAACe,eAJe;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAKbf,aAAa,CAACe,eAAd,CAA8BC,GAA9B,CALa;;AAAA;AAK/BX,kBAAAA,SAL+B;;AAAA;AAQjC;AACA;AACMF,kBAAAA,YAV2B,GAUZI,gBAAgB,EAVJ;AAAA;AAAA;AAAA,yBAczBW,OAAO,CAAC,mBAAD,CAAP,CAA6BC,eAA7B,CACJ,MAAC,OAAD;AACE,oBAAA,SAAS,oBACJd,SADI;AAEPF,sBAAAA,YAAY,EAAZA;AAFO,sBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADI,CAdyB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuB/B;AACA;AACA;AACAU,kBAAAA,OAAO,CAACO,KAAR,CAAc,uCAAd;;AA1B+B;AA6BjC;AACA;AACAvB,kBAAAA,IAAI,CAACwB,MAAL,GA/BiC,CAiCjC;;AACMjB,kBAAAA,WAlC2B,GAkCbD,YAAY,CAACmB,KAAb,CAAmBC,OAAnB,EAlCa;AAAA,qEAqC5BlB,SArC4B;AAsC/BD,oBAAAA,WAAW,EAAXA;AAtC+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnC;;AAAA;AAAA;AAAA;AAAA;AAyCD;AACF;;AAED,SAAOF,gBAAP;AACD","sourcesContent":["import React, { useMemo } from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApolloClient (PageComponent, { ssr = true } = {}) {\n  const WithApolloClient = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = useMemo(\n      () => apolloClient || initApolloClient(apolloState),\n      []\n    )\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApolloClient HOC only works with PageComponents.')\n    }\n\n    WithApolloClient.displayName = `withApolloClient(${displayName})`\n  }\n\n  // Allow Next.js to remove getInitialProps from the browser build\n  if (typeof window === 'undefined') {\n    if (ssr) {\n      WithApolloClient.getInitialProps = async ctx => {\n        const { AppTree } = ctx\n\n        let pageProps = {}\n        if (PageComponent.getInitialProps) {\n          pageProps = await PageComponent.getInitialProps(ctx)\n        }\n\n        // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n        const apolloClient = initApolloClient()\n\n        try {\n          // Run all GraphQL queries\n          await require('@apollo/react-ssr').getDataFromTree(\n            <AppTree\n              pageProps={{\n                ...pageProps,\n                apolloClient\n              }}\n            />\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n\n        // Extract query data from the Apollo store\n        const apolloState = apolloClient.cache.extract()\n\n        return {\n          ...pageProps,\n          apolloState\n        }\n      }\n    }\n  }\n\n  return WithApolloClient\n}\n\n\n"]},"metadata":{},"sourceType":"module"}