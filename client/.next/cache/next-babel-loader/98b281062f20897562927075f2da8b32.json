{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/malcolm/Dev/VS/amis/All-Mankind/client/components/Submit.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { ALL_POSTS_QUERY, allPostsQueryVars } from './PostList';\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($title: String!, $url: String!) {\n    createPost(title: $title, url: $url) {\n      id\n      title\n      votes\n      url\n      createdAt\n    }\n  }\n`;\nexport default function Submit() {\n  const [createPost, {\n    loading\n  }] = useMutation(CREATE_POST_MUTATION);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const formData = new window.FormData(form);\n    const title = formData.get('title');\n    const url = formData.get('url');\n    form.reset();\n    createPost({\n      variables: {\n        title,\n        url\n      },\n      update: (proxy, {\n        data: {\n          createPost\n        }\n      }) => {\n        const data = proxy.readQuery({\n          query: ALL_POSTS_QUERY,\n          variables: allPostsQueryVars\n        }); // Update the cache with the new post at the top of the\n\n        proxy.writeQuery({\n          query: ALL_POSTS_QUERY,\n          data: _objectSpread({}, data, {\n            allPosts: [createPost, ...data.allPosts]\n          }),\n          variables: allPostsQueryVars\n        });\n      }\n    });\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"jsx-4286934451\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"jsx-4286934451\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Submit\"), __jsx(\"input\", {\n    placeholder: \"title\",\n    name: \"title\",\n    type: \"text\",\n    required: true,\n    className: \"jsx-4286934451\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    placeholder: \"url\",\n    name: \"url\",\n    type: \"url\",\n    required: true,\n    className: \"jsx-4286934451\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: loading,\n    className: \"jsx-4286934451\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Submit\"), __jsx(_JSXStyle, {\n    id: \"4286934451\",\n    __self: this\n  }, \"form.jsx-4286934451{border-bottom:1px solid #ececec;padding-bottom:20px;margin-bottom:20px;}h1.jsx-4286934451{font-size:20px;}input.jsx-4286934451{display:block;margin-bottom:10px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWxjb2xtL0Rldi9WUy9hbWlzL0FsbC1NYW5raW5kL2NsaWVudC9jb21wb25lbnRzL1N1Ym1pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1RGtCLEFBRzJDLEFBS2pCLEFBR0QsY0FDSyxDQUhyQixpQkFMc0IsQ0FTdEIsbUJBUnFCLG1CQUNyQiIsImZpbGUiOiIvVXNlcnMvbWFsY29sbS9EZXYvVlMvYW1pcy9BbGwtTWFua2luZC9jbGllbnQvY29tcG9uZW50cy9TdWJtaXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNdXRhdGlvbiB9IGZyb20gJ0BhcG9sbG8vcmVhY3QtaG9va3MnXG5pbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJ1xuaW1wb3J0IHsgQUxMX1BPU1RTX1FVRVJZLCBhbGxQb3N0c1F1ZXJ5VmFycyB9IGZyb20gJy4vUG9zdExpc3QnXG5cbmNvbnN0IENSRUFURV9QT1NUX01VVEFUSU9OID0gZ3FsYFxuICBtdXRhdGlvbiBjcmVhdGVQb3N0KCR0aXRsZTogU3RyaW5nISwgJHVybDogU3RyaW5nISkge1xuICAgIGNyZWF0ZVBvc3QodGl0bGU6ICR0aXRsZSwgdXJsOiAkdXJsKSB7XG4gICAgICBpZFxuICAgICAgdGl0bGVcbiAgICAgIHZvdGVzXG4gICAgICB1cmxcbiAgICAgIGNyZWF0ZWRBdFxuICAgIH1cbiAgfVxuYFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdWJtaXQgKCkge1xuICBjb25zdCBbY3JlYXRlUG9zdCwgeyBsb2FkaW5nIH1dID0gdXNlTXV0YXRpb24oQ1JFQVRFX1BPU1RfTVVUQVRJT04pXG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gZXZlbnQgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBmb3JtID0gZXZlbnQudGFyZ2V0XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgd2luZG93LkZvcm1EYXRhKGZvcm0pXG4gICAgY29uc3QgdGl0bGUgPSBmb3JtRGF0YS5nZXQoJ3RpdGxlJylcbiAgICBjb25zdCB1cmwgPSBmb3JtRGF0YS5nZXQoJ3VybCcpXG4gICAgZm9ybS5yZXNldCgpXG5cbiAgICBjcmVhdGVQb3N0KHtcbiAgICAgIHZhcmlhYmxlczogeyB0aXRsZSwgdXJsIH0sXG4gICAgICB1cGRhdGU6IChwcm94eSwgeyBkYXRhOiB7IGNyZWF0ZVBvc3QgfSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBwcm94eS5yZWFkUXVlcnkoe1xuICAgICAgICAgIHF1ZXJ5OiBBTExfUE9TVFNfUVVFUlksXG4gICAgICAgICAgdmFyaWFibGVzOiBhbGxQb3N0c1F1ZXJ5VmFyc1xuICAgICAgICB9KVxuICAgICAgICAvLyBVcGRhdGUgdGhlIGNhY2hlIHdpdGggdGhlIG5ldyBwb3N0IGF0IHRoZSB0b3Agb2YgdGhlXG4gICAgICAgIHByb3h5LndyaXRlUXVlcnkoe1xuICAgICAgICAgIHF1ZXJ5OiBBTExfUE9TVFNfUVVFUlksXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIGFsbFBvc3RzOiBbY3JlYXRlUG9zdCwgLi4uZGF0YS5hbGxQb3N0c11cbiAgICAgICAgICB9LFxuICAgICAgICAgIHZhcmlhYmxlczogYWxsUG9zdHNRdWVyeVZhcnNcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICAgIDxoMT5TdWJtaXQ8L2gxPlxuICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPSd0aXRsZScgbmFtZT0ndGl0bGUnIHR5cGU9J3RleHQnIHJlcXVpcmVkIC8+XG4gICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9J3VybCcgbmFtZT0ndXJsJyB0eXBlPSd1cmwnIHJlcXVpcmVkIC8+XG4gICAgICA8YnV0dG9uIHR5cGU9J3N1Ym1pdCcgZGlzYWJsZWQ9e2xvYWRpbmd9PlxuICAgICAgICBTdWJtaXRcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBmb3JtIHtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VjZWNlYztcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICB9XG4gICAgICAgIGgxIHtcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8L2Zvcm0+XG4gIClcbn1cbiJdfQ== */\\n/*@ sourceURL=/Users/malcolm/Dev/VS/amis/All-Mankind/client/components/Submit.js */\"));\n}","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/components/Submit.js"],"names":["useMutation","gql","ALL_POSTS_QUERY","allPostsQueryVars","CREATE_POST_MUTATION","Submit","createPost","loading","handleSubmit","event","preventDefault","form","target","formData","window","FormData","title","get","url","reset","variables","update","proxy","data","readQuery","query","writeQuery","allPosts"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,YAAnD;AAEA,MAAMC,oBAAoB,GAAGH,GAAI;;;;;;;;;;CAAjC;AAYA,eAAe,SAASI,MAAT,GAAmB;AAChC,QAAM,CAACC,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAA4BP,WAAW,CAACI,oBAAD,CAA7C;;AAEA,QAAMI,YAAY,GAAGC,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACG,MAAnB;AACA,UAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,QAAX,CAAoBJ,IAApB,CAAjB;AACA,UAAMK,KAAK,GAAGH,QAAQ,CAACI,GAAT,CAAa,OAAb,CAAd;AACA,UAAMC,GAAG,GAAGL,QAAQ,CAACI,GAAT,CAAa,KAAb,CAAZ;AACAN,IAAAA,IAAI,CAACQ,KAAL;AAEAb,IAAAA,UAAU,CAAC;AACTc,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,KAAF;AAASE,QAAAA;AAAT,OADF;AAETG,MAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,QAAAA,IAAI,EAAE;AAAEjB,UAAAA;AAAF;AAAR,OAAR,KAAqC;AAC3C,cAAMiB,IAAI,GAAGD,KAAK,CAACE,SAAN,CAAgB;AAC3BC,UAAAA,KAAK,EAAEvB,eADoB;AAE3BkB,UAAAA,SAAS,EAAEjB;AAFgB,SAAhB,CAAb,CAD2C,CAK3C;;AACAmB,QAAAA,KAAK,CAACI,UAAN,CAAiB;AACfD,UAAAA,KAAK,EAAEvB,eADQ;AAEfqB,UAAAA,IAAI,oBACCA,IADD;AAEFI,YAAAA,QAAQ,EAAE,CAACrB,UAAD,EAAa,GAAGiB,IAAI,CAACI,QAArB;AAFR,YAFW;AAMfP,UAAAA,SAAS,EAAEjB;AANI,SAAjB;AAQD;AAhBQ,KAAD,CAAV;AAkBD,GA1BD;;AA4BA,SACE;AAAM,IAAA,QAAQ,EAAEK,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAO,IAAA,WAAW,EAAC,OAAnB;AAA2B,IAAA,IAAI,EAAC,OAAhC;AAAwC,IAAA,IAAI,EAAC,MAA7C;AAAoD,IAAA,QAAQ,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAO,IAAA,WAAW,EAAC,KAAnB;AAAyB,IAAA,IAAI,EAAC,KAA9B;AAAoC,IAAA,IAAI,EAAC,KAAzC;AAA+C,IAAA,QAAQ,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAED,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA,oqGADF;AAwBD","sourcesContent":["import { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { ALL_POSTS_QUERY, allPostsQueryVars } from './PostList'\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($title: String!, $url: String!) {\n    createPost(title: $title, url: $url) {\n      id\n      title\n      votes\n      url\n      createdAt\n    }\n  }\n`\n\nexport default function Submit () {\n  const [createPost, { loading }] = useMutation(CREATE_POST_MUTATION)\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    const form = event.target\n    const formData = new window.FormData(form)\n    const title = formData.get('title')\n    const url = formData.get('url')\n    form.reset()\n\n    createPost({\n      variables: { title, url },\n      update: (proxy, { data: { createPost } }) => {\n        const data = proxy.readQuery({\n          query: ALL_POSTS_QUERY,\n          variables: allPostsQueryVars\n        })\n        // Update the cache with the new post at the top of the\n        proxy.writeQuery({\n          query: ALL_POSTS_QUERY,\n          data: {\n            ...data,\n            allPosts: [createPost, ...data.allPosts]\n          },\n          variables: allPostsQueryVars\n        })\n      }\n    })\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Submit</h1>\n      <input placeholder='title' name='title' type='text' required />\n      <input placeholder='url' name='url' type='url' required />\n      <button type='submit' disabled={loading}>\n        Submit\n      </button>\n      <style jsx>{`\n        form {\n          border-bottom: 1px solid #ececec;\n          padding-bottom: 20px;\n          margin-bottom: 20px;\n        }\n        h1 {\n          font-size: 20px;\n        }\n        input {\n          display: block;\n          margin-bottom: 10px;\n        }\n      `}</style>\n    </form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}