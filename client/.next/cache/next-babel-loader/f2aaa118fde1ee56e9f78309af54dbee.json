{"ast":null,"code":"var _jsxFileName = \"/Users/malcolm/Dev/VS/amis/All-Mankind/client/components/ProductGroup/ProductGroup.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport ProductGroupItem from './ProductGroupItem';\nexport const GET_CATALOG_ITEMS = gql`\n  query GetCatalogItems($shopId: ID!, $first: ConnectionLimitInt, $last: ConnectionLimitInt, \n                        $before: ConnectionCursor, $after: ConnectionCursor, $sortBy: CatalogItemSortByField, \n                        $sortByPriceCurrencyCode: String, $sortOrder: SortOrder) {\n      catalogItems(shopIds: [$shopId], first: $first, last: $last, before: $before,\n                   after: $after, sortBy: $sortBy, sortByPriceCurrencyCode: $sortByPriceCurrencyCode, \n                   sortOrder: $sortOrder) {\n      totalCount\n      pageInfo {\n        endCursor\n        startCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          _id\n          ... on CatalogItemProduct {\n            product {\n              _id\n              title\n              slug\n              description\n              vendor\n              pricing {\n                compareAtPrice {\n                  displayAmount\n                }\n                displayPrice\n              }\n              primaryImage {\n                URLs {\n                  small\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst getCatalogItemsVars = {\n  shopId: 'cmVhY3Rpb24vc2hvcDpKOEJocTN1VHRkZ3daeDNyeg==',\n  sortBy: 'createdAt',\n  sortOrder: 'desc'\n};\n\nfunction ProductGroup() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_CATALOG_ITEMS, {\n    variables: getCatalogItemsVars\n  });\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"ERROR: \", error.message);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Loading CatalogItems...\");\n  const {\n    edges\n  } = data.catalogItems;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Product Group\"), __jsx(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, edges.map((edge, i) => {\n    __jsx(ProductGroupItem, {\n      node: edge.node,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    });\n  })));\n}\n\nexport default ProductGroup;","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/components/ProductGroup/ProductGroup.js"],"names":["React","Fragment","useQuery","gql","ProductGroupItem","GET_CATALOG_ITEMS","getCatalogItemsVars","shopId","sortBy","sortOrder","ProductGroup","loading","error","data","variables","message","edges","catalogItems","map","edge","i","node"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,OAAO,MAAMC,iBAAiB,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA9B;AA4CP,MAAMG,mBAAmB,GAAG;AAC1BC,EAAAA,MAAM,EAAE,8CADkB;AAE1BC,EAAAA,MAAM,EAAE,WAFkB;AAG1BC,EAAAA,SAAS,EAAE;AAHe,CAA5B;;AAMA,SAASC,YAAT,GAAyB;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BX,QAAQ,CACvCG,iBADuC,EAEvC;AAAES,IAAAA,SAAS,EAAER;AAAb,GAFuC,CAAzC;AAKA,MAAIM,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWA,KAAK,CAACG,OAAjB,CAAP;AACX,MAAIJ,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AAEb,QAAM;AAAEK,IAAAA;AAAF,MAAYH,IAAI,CAACI,YAAvB;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACtB,UAAC,gBAAD;AAAkB,MAAA,IAAI,EAAED,IAAI,CAACE,IAA7B;AAAmC,MAAA,GAAG,EAAED,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAFA,CADH,CAFF,CADF;AAUD;;AAED,eAAeV,YAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport ProductGroupItem from './ProductGroupItem';\n\nexport const GET_CATALOG_ITEMS = gql`\n  query GetCatalogItems($shopId: ID!, $first: ConnectionLimitInt, $last: ConnectionLimitInt, \n                        $before: ConnectionCursor, $after: ConnectionCursor, $sortBy: CatalogItemSortByField, \n                        $sortByPriceCurrencyCode: String, $sortOrder: SortOrder) {\n      catalogItems(shopIds: [$shopId], first: $first, last: $last, before: $before,\n                   after: $after, sortBy: $sortBy, sortByPriceCurrencyCode: $sortByPriceCurrencyCode, \n                   sortOrder: $sortOrder) {\n      totalCount\n      pageInfo {\n        endCursor\n        startCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          _id\n          ... on CatalogItemProduct {\n            product {\n              _id\n              title\n              slug\n              description\n              vendor\n              pricing {\n                compareAtPrice {\n                  displayAmount\n                }\n                displayPrice\n              }\n              primaryImage {\n                URLs {\n                  small\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getCatalogItemsVars = {\n  shopId: 'cmVhY3Rpb24vc2hvcDpKOEJocTN1VHRkZ3daeDNyeg==',\n  sortBy: 'createdAt',\n  sortOrder: 'desc'\n};\n\nfunction ProductGroup () {\n  const { loading, error, data } = useQuery(\n    GET_CATALOG_ITEMS, \n    { variables: getCatalogItemsVars }\n  );\n\n  if (error) return <p>ERROR: {error.message}</p>\n  if (loading) return <p>Loading CatalogItems...</p>\n\n  const { edges } = data.catalogItems;\n  return (\n    <div>\n      <h2>Product Group</h2>\n      <Fragment>\n        {edges.map((edge, i) => {\n          <ProductGroupItem node={edge.node} key={i}/>\n        })}\n      </Fragment>\n    </div>\n  );\n}\n\nexport default ProductGroup;"]},"metadata":{},"sourceType":"module"}