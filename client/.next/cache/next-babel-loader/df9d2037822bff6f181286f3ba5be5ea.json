{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/with-apollo-client.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApolloClient(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApolloClient = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = useMemo(() => apolloClient || initApolloClient(apolloState), []);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApolloClient HOC only works with PageComponents.');\n    }\n\n    WithApolloClient.displayName = `withApolloClient(${displayName})`;\n  } // Allow Next.js to remove getInitialProps from the browser build\n\n\n  if (true) {\n    if (ssr) {\n      WithApolloClient.getInitialProps = async ctx => {\n        const {\n          AppTree\n        } = ctx;\n        let pageProps = {};\n\n        if (PageComponent.getInitialProps) {\n          pageProps = await PageComponent.getInitialProps(ctx);\n        } // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n\n\n        const apolloClient = initApolloClient();\n\n        try {\n          // Run all GraphQL queries\n          await require('@apollo/react-ssr').getDataFromTree(__jsx(AppTree, {\n            pageProps: _objectSpread({}, pageProps, {\n              apolloClient\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind(); // Extract query data from the Apollo store\n\n        const apolloState = apolloClient.cache.extract();\n        return _objectSpread({}, pageProps, {\n          apolloState\n        });\n      };\n    }\n  }\n\n  return WithApolloClient;\n}","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/with-apollo-client.js"],"names":["React","useMemo","Head","ApolloProvider","withApolloClient","PageComponent","ssr","WithApolloClient","apolloClient","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","require","getDataFromTree","error","rewind","cache","extract"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,gBAAT,CAA2BC,aAA3B,EAA0C;AAAEC,EAAAA,GAAG,GAAG;AAAR,IAAiB,EAA3D,EAA+D;AACpE,QAAMC,gBAAgB,GAAG,UAAiD;AAAA,QAAhD;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAgD;AAAA,QAAhBC,SAAgB;;AACxE,UAAMC,MAAM,GAAGV,OAAO,CACpB,MAAMO,YAAY,IAAII,gBAAgB,CAACH,WAAD,CADlB,EAEpB,EAFoB,CAAtB;AAIA,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GAVD,CADoE,CAapE;;;AACA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAMC,WAAW,GACfX,aAAa,CAACW,WAAd,IAA6BX,aAAa,CAACY,IAA3C,IAAmD,WADrD;;AAGA,QAAID,WAAW,KAAK,KAApB,EAA2B;AACzBE,MAAAA,OAAO,CAACC,IAAR,CAAa,2DAAb;AACD;;AAEDZ,IAAAA,gBAAgB,CAACS,WAAjB,GAAgC,oBAAmBA,WAAY,GAA/D;AACD,GAvBmE,CAyBpE;;;AACA,YAAmC;AACjC,QAAIV,GAAJ,EAAS;AACPC,MAAAA,gBAAgB,CAACa,eAAjB,GAAmC,MAAMC,GAAN,IAAa;AAC9C,cAAM;AAAEC,UAAAA;AAAF,YAAcD,GAApB;AAEA,YAAIX,SAAS,GAAG,EAAhB;;AACA,YAAIL,aAAa,CAACe,eAAlB,EAAmC;AACjCV,UAAAA,SAAS,GAAG,MAAML,aAAa,CAACe,eAAd,CAA8BC,GAA9B,CAAlB;AACD,SAN6C,CAQ9C;AACA;;;AACA,cAAMb,YAAY,GAAGI,gBAAgB,EAArC;;AAEA,YAAI;AACF;AACA,gBAAMW,OAAO,CAAC,mBAAD,CAAP,CAA6BC,eAA7B,CACJ,MAAC,OAAD;AACE,YAAA,SAAS,oBACJd,SADI;AAEPF,cAAAA;AAFO,cADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADI,CAAN;AAQD,SAVD,CAUE,OAAOiB,KAAP,EAAc;AACd;AACA;AACA;AACAP,UAAAA,OAAO,CAACO,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD,SA3B6C,CA6B9C;AACA;;;AACAvB,QAAAA,IAAI,CAACwB,MAAL,GA/B8C,CAiC9C;;AACA,cAAMjB,WAAW,GAAGD,YAAY,CAACmB,KAAb,CAAmBC,OAAnB,EAApB;AAEA,iCACKlB,SADL;AAEED,UAAAA;AAFF;AAID,OAxCD;AAyCD;AACF;;AAED,SAAOF,gBAAP;AACD","sourcesContent":["import React, { useMemo } from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApolloClient (PageComponent, { ssr = true } = {}) {\n  const WithApolloClient = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = useMemo(\n      () => apolloClient || initApolloClient(apolloState),\n      []\n    )\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApolloClient HOC only works with PageComponents.')\n    }\n\n    WithApolloClient.displayName = `withApolloClient(${displayName})`\n  }\n\n  // Allow Next.js to remove getInitialProps from the browser build\n  if (typeof window === 'undefined') {\n    if (ssr) {\n      WithApolloClient.getInitialProps = async ctx => {\n        const { AppTree } = ctx\n\n        let pageProps = {}\n        if (PageComponent.getInitialProps) {\n          pageProps = await PageComponent.getInitialProps(ctx)\n        }\n\n        // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n        const apolloClient = initApolloClient()\n\n        try {\n          // Run all GraphQL queries\n          await require('@apollo/react-ssr').getDataFromTree(\n            <AppTree\n              pageProps={{\n                ...pageProps,\n                apolloClient\n              }}\n            />\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n\n        // Extract query data from the Apollo store\n        const apolloState = apolloClient.cache.extract()\n\n        return {\n          ...pageProps,\n          apolloState\n        }\n      }\n    }\n  }\n\n  return WithApolloClient\n}\n\n\n"]},"metadata":{},"sourceType":"module"}