{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nexport default function createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  var isBrowser = true;\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/graphql-beta',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      // Use fetch() polyfill on the server\n      fetch: !isBrowser && fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Users/malcolm/Dev/VS/amis/All-Mankind/client/lib/init-apollo-client.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","initApolloClient","initialState","createApolloClient","isBrowser","connectToDevTools","ssrMode","link","uri","credentials","cache","restore"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB;AAEA;;;;;;AAKA,SAASC,gBAAT,CAA2BC,YAA3B,EAAyC;AACvC;AACA;AACA,aAAmC;AACjC,WAAOC,kBAAkB,CAACD,YAAD,CAAzB;AACD,GALsC,CAOvC;;;AACA,MAAI,CAACF,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGG,kBAAkB,CAACD,YAAD,CAAjC;AACD;;AAED,SAAOF,YAAP;AACD;AAED;;;;;;AAIA,eAAe,SAASG,kBAAT,GAAgD;AAAA,MAAnBD,YAAmB,uEAAJ,EAAI;AAC7D;AACA,MAAME,SAAS,OAAf;AACA,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,iBAAiB,EAAED,SADG;AAEtBE,IAAAA,OAAO,EAAE,CAACF,SAFY;AAED;AACrBG,IAAAA,IAAI,EAAE,IAAIT,QAAJ,CAAa;AACjBU,MAAAA,GAAG,EAAE,oCADY;AAC0B;AAC3CC,MAAAA,WAAW,EAAE,aAFI;AAEW;AAC5B;AACAV,MAAAA,KAAK,EAAE,CAACK,SAAD,IAAcL;AAJJ,KAAb,CAHgB;AAStBW,IAAAA,KAAK,EAAE,IAAIb,aAAJ,GAAoBc,OAApB,CAA4BT,YAA5B;AATe,GAAjB,CAAP;AAWD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient (initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState)\n  }\n\n  return apolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nexport default function createApolloClient (initialState = {}) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  const isBrowser = typeof window !== 'undefined'\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://localhost:3000/graphql-beta', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      // Use fetch() polyfill on the server\n      fetch: !isBrowser && fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  })\n}"]},"metadata":{},"sourceType":"module"}