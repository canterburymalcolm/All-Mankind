{"version":3,"file":"static/webpack/static/development/pages/index.js.1462ea77a9aad13e262d.hot-update.js","sources":["webpack:///./lib/with-apollo-client.js","webpack:///./pages/index.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApolloClient (PageComponent, { ssr = true } = {}) {\n  const WithApolloClient = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = useMemo(\n      () => apolloClient || initApolloClient(apolloState),\n      []\n    )\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApolloClient HOC only works with PageComponents.')\n    }\n\n    WithApolloClient.displayName = `withApolloClient(${displayName})`\n  }\n\n  // Allow Next.js to remove getInitialProps from the browser build\n  if (typeof window === 'undefined') {\n    if (ssr) {\n      WithApolloClient.getInitialProps = async ctx => {\n        const { AppTree } = ctx\n\n        let pageProps = {}\n        if (PageComponent.getInitialProps) {\n          pageProps = await PageComponent.getInitialProps(ctx)\n        }\n\n        // Run all GraphQL queries in the component tree\n        // and extract the resulting data\n        const apolloClient = initApolloClient()\n\n        try {\n          // Run all GraphQL queries\n          await require('@apollo/react-ssr').getDataFromTree(\n            <AppTree\n              pageProps={{\n                ...pageProps,\n                apolloClient\n              }}\n            />\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n\n        // Extract query data from the Apollo store\n        const apolloState = apolloClient.cache.extract()\n\n        return {\n          ...pageProps,\n          apolloState\n        }\n      }\n    }\n  }\n\n  return WithApolloClient\n}\n\n\n","import { withApolloClient } from '../lib/with-apollo-client';\n\nconst IndexPage = props => (\n  <h1>Querying Data</h1>\n);\n\nexport default withApolloClient(IndexPage);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eA4CA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;;;;A","sourceRoot":""}