{"version":3,"file":"static/webpack/static/development/pages/_app.js.52818ceb4522722da683.hot-update.js","sources":["webpack:///./lib/apollo/with-apollo-client.js"],"sourcesContent":["import React from 'react';\nimport { getDataFromTree } from '@apollo/react-ssr';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = `WithApolloClient(App)`;\n    static async getInitialProps (ctx) {\n      const { AppTree } = ctx;\n\n      // TODO:\n      // - pass prop data to url \n      // - check if getInitialProps was called without a requrest object\n      // - parse user object\n\n\n      //ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      // TODO: don't render if the response is finished while redirecting\n\n      // const apolloState = {};\n\n      // if (!process.browser) {\n      //   // Run all GraphQL queries\n      //   await getDataFromTree((\n      //     <ApolloProvider client={apollo}>\n      //       <WrappedComponent {...appProps} Component={Component} router={router} />\n      //     </ApolloProvider>\n      //   ));\n\n      const apollo = initApollo();\n      if (typeof window === 'undefined') {\n        try {\n          await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />);\n        } catch (error) {\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head sideeffect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      //Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    // static propTypes = {\n    //   apolloState: PropTypes.object.isRequired\n    // };\n\n    // TODO: getDerivedStateFromProps(nextProps)\n    // - update routing store and rewrite routing path\n\n    constructor(props) {\n      super(props);\n      // `getDataFromTree` renders the component first, then the client is passed off as a property.\n      // After that, render is done using Next's normal rendering pipeline\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App apolloClient={this.apolloClient} {...this.props} />\n    }\n  }\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAeA;AACA;AAhBA;AAkBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA/BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAiCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAmCA;AACA;AApCA;AAsCA;AACA;AACA;AACA;AAzCA;AA2CA;AACA;AA5CA;AAgDA;AAhDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAqDA;AACA;AAEA;AACA;AACA;AA1DA;AACA;AA0DA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAAA;AAJA;AAKA;AACA;AAjEA;AAAA;AAAA;AAmEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApEA;AACA;AADA;AAAA;AAsEA;;;;A","sourceRoot":""}